facet_wrap(~ key, scales = "free") +   # In separate panels
geom_bar()                         # as density
ntrain %>%
keep(is.numeric) %>%                     # Keep only numeric columns
gather() %>%                             # Convert to key-value pairs
ggplot(aes(value)) +                     # Plot the values
facet_wrap(~ key, scales = "free") +   # In separate panels
geom_density()                         # as density
ggplot(train, aes(x=d,y=SalePrice)) + geom_point() + ggtitle("Finished Basement SF vs Sale Price") + xlab("Finished Basement (BsmtFinSF1 + BsmtFinSF2)")
ntrain<-select_if(train, is.numeric)
ntrain %>%
keep(is.numeric) %>%                     # Keep only numeric columns
gather() %>%                             # Convert to key-value pairs
ggplot(aes(value)) +                     # Plot the values
facet_wrap(~ key, scales = "free") +   # In separate panels
geom_bar()                         # as density
library("dplyr")
library(purrr)
library(tidyr)
library(ggplot2)
library(corrplot)
ntrain<-select_if(train, is.numeric)
ntrain %>%
keep(is.numeric) %>%                     # Keep only numeric columns
gather() %>%                             # Convert to key-value pairs
ggplot(aes(value)) +                     # Plot the values
facet_wrap(~ key, scales = "free") +   # In separate panels
geom_bar()                         # as density
ntrain %>%
keep(is.numeric) %>%                     # Keep only numeric columns
gather() %>%                             # Convert to key-value pairs
ggplot(aes(value)) +                     # Plot the values
facet_wrap(~ key, scales = "free") +   # In separate panels
geom_density()                         # as density
ggplot(train, aes(x=BsmtFinSF12,y=SalePrice)) + geom_point() + ggtitle("Finished Basement SF vs Sale Price") + xlab("Finished Basement (BsmtFinSF1 + BsmtFinSF2)")
subset <- select(train, TotalBsmtSF, TotRmsAbvGrd, LotArea, SalePrice)
subcor <- cor(subset)
corrplot(subcor, method="square")
ggplot(train, aes(x=BsmtFinSF12,y=SalePrice)) + geom_point() + ggtitle("Finished Basement SF vs Sale Price") + xlab("Finished Basement (BsmtFinSF1 + BsmtFinSF2)")
subset <- select(train, TotalBsmtSF, TotRmsAbvGrd, LotArea, SalePrice)
subcor <- cor(subset)
corrplot(subcor, method="square")
subset <- select(train, TotalBsmtSF, TotRmsAbvGrd, LotArea, SalePrice)
subcor <- cor(subset)
par(mfrow=c(1,2))
ggplot(train, aes(x=BsmtFinSF12,y=SalePrice)) + geom_point() + ggtitle("Finished Basement SF vs Sale Price") + xlab("Finished Basement (BsmtFinSF1 + BsmtFinSF2)")
corrplot(subcor, method="square")
par(mfrow=c(1,2))
corrplot(subcor, method="square")
ggplot(train, aes(x=BsmtFinSF12,y=SalePrice)) + geom_point() + ggtitle("Finished Basement SF vs Sale Price") + xlab("Finished Basement (BsmtFinSF1 + BsmtFinSF2)")
t.test(train$TotalBsmtSF, train$SalePrice)
cor.test(train$TotalBsmtSF, train$SalePrice, method = "pearson" , conf.level = 0.99)
cor.test(train$TotalBsmtSF, train$SalePrice, method = "pearson" , conf.level = 0.99)
library(MASS)
min(train$BsmtFinSF12)
train$BsmtFinSF122 <- train$BsmtFinSF12 + 1/10000
min(train$BsmtFinSF122)
#fit an exp dist
fitexpd <- fitdistr(train$BsmtFinSF122, "exponential")
lam <- fitexpd$estimate
print(lam)
s <- rexp(1000, lam)
#histogram of old and new
par(mfrow=c(1,2))
hist(train$BsmtFinSF12, main="Original Data from Train", xlab="TotBsmtFin (1 and 2)")
hist(s, main="Sample Data")
summary(model2)
#fit a linear regression model
newdatacor = cor(trainsub)
# Split data in reg and train
#using ntrain from the 2nd question
n <- nrow(ntrain) #1460 rows of data
shuffle_ntrain <- ntrain[sample(n), ]
train_indices <- 1:round(0.7 * n)
trainsub <- shuffle_ntrain[train_indices, ]
test_indices <- (round(0.7 * n) + 1):n
testsub <- shuffle_ntrain[test_indices, ]
testsub[is.na(testsub)] <- 0
ntrain[is.na(ntrain)] <- 0
#fit a linear regression model
newdatacor = cor(trainsub)
corrplot(newdatacor)
model <- lm(SalePrice ~ ., data=trainsub)
summary(model)
plot(model$residuals ~ model$fitted.values)
#extract variables that are significant and rerun model
sigvars <- data.frame(summary(model)$coef[summary(model)$coef[,4] <= .05, 4])
sigvars <- add_rownames(sigvars, "vars")
colist<-dplyr::pull(sigvars, vars)
idx <- match(colist, names(trainsub))
trainsub2 <- cbind(trainsub[,idx], trainsub['SalePrice'])
model2<-lm(SalePrice ~ ., data=trainsub2)
summary(model2)
setwd("~/Documents/GitHub/data621/Week5")
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(dplyr)
library(purrr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(FactoMineR)
library(VIF)
library(knitr)
library(kableExtra)
library(Hmisc)
library(pROC)
library(binr)
# read data
train = read.csv(file="data/wine-training-data.csv")
dim(train)
View(train)
#check data
summary(train) %>% kable() %>% kable_styling()
sapply(train, function(x) sum(is.na(x))) %>% kable() %>% kable_styling()
# library(UpSetR)
#
# train %>% as_shadow_upset() %>% upset()
library(UpSetR)
train %>% as_shadow_upset() %>% upset()
ntrain<-select_if(train, is.numeric)
ntrain %>%
keep(is.numeric) %>%                     # Keep only numeric columns
gather() %>%                             # Convert to key-value pairs
ggplot(aes(value)) +                     # Plot the values
facet_wrap(~ key, scales = "free") +   # In separate panels
geom_density()
train
train %>% as_shadow_upset()
train %>% as_shadow_upset() %>% upset()
install.packages("naniar")
library(naniar)
vis_miss(train)
vis_miss(train$STARS)
ggplot(train,
aes(x = STARS,
y = ResidualSugar)) +
geom_miss_point()
gg_miss_fct(x = train, fct = TARGET)
gg_miss_fct(x = train, fct = STARS)
gg_miss_fct(x = train, fct = TARGET)
train %>%
as_shadow_upset() %>%
upset(nsets = 24)
train %>%
as_shadow_upset() %>%
upset(nsets = 24)
ntrain<-select_if(train, is.numeric)
ntrain %>%
keep(is.numeric) %>%                     # Keep only numeric columns
gather() %>%                             # Convert to key-value pairs
ggplot(aes(value)) +                     # Plot the values
facet_wrap(~ key, scales = "free") +   # In separate panels
geom_density()
summary(train) %>% kable() %>% kable_styling()
str(train)
str(train) %>% kable() %>% kable_styling()
str(train) %>% kable() %>% kable_styling()
str(train)
ntrain<-select_if(train, is.integer)
ntrain %>%
keep(is.numeric) %>%                     # Keep only numeric columns
gather() %>%                             # Convert to key-value pairs
ggplot(aes(value)) +                     # Plot the values
facet_wrap(~ key, scales = "free") +   # In separate panels
geom_density()
ntrain<-select_if(train, is.numeric)
ntrain %>%
keep(is.numeric) %>%                     # Keep only numeric columns
gather() %>%                             # Convert to key-value pairs
ggplot(aes(value)) +                     # Plot the values
facet_wrap(~ key, scales = "free") +   # In separate panels
boxplot()
ggplot(train, aes(value, x, group = round_any(x, 0.5), fill=variable))+
geom_boxplot() +
geom_jitter() +
facet_wrap(~variable)
trainc <- complete.cases(train)
rcorr(as.matrix(train))
corrplot(cor(train), method="square")
summary(trainc)
trainc
trainc <- train[complete.cases(train), ]
rcorr(as.matrix(train))
corrplot(cor(train), method="square")
summary(trainc)
rcorr(as.matrix(train))
trainc <- trainc[, !(colnames(trainc) %in% c("INDEX"))]
summary(trainc)
rcorr(as.matrix(trainc))
corrplot(cor(trainc), method="square")
corrplot(cor(trainc), method="square")
boxplot_data <-
train %>%
dplyr::select(rownames(metrics_df)[metrics_df$unique_values < 15]) %>%
reshape2::melt(id.vars = "TARGET")
boxplot_data <-
train %>%
dplyr::select(rownames(train)[train$unique_values < 15]) %>%
reshape2::melt(id.vars = "TARGET")
metrics_df <- summary_metrics(train)
metrics_df <- summary_metrics(train)
summary_metrics <- function(df){
###Creates summary metrics table
metrics_only <- df[, sapply(df, is.numeric)]
df_metrics <- psych::describe(metrics_only, quant = c(.25,.75))
df_metrics$unique_values = rapply(metrics_only, function(x) length(unique(x)))
df_metrics <-
dplyr::select(df_metrics, n, unique_values, min, Q.1st = Q0.25, median, mean, Q.3rd = Q0.75,
max, range, sd, skew, kurtosis
)
return(df_metrics)
}
metrics_df <- summary_metrics(train)
boxplot_data <-
train %>%
dplyr::select(rownames(metrics_df)[metrics_df$unique_values < 15]) %>%
reshape2::melt(id.vars = "TARGET")
ggplot(data = boxplot_data, aes(x = factor(value), y = TARGET)) +
geom_boxplot() +
facet_wrap( ~ variable, scales = "free") +
coord_flip() +
ggthemes::theme_fivethirtyeight()
ggplot(data = boxplot_data, aes(x = factor(value), y = TARGET)) +
geom_boxplot() +
facet_wrap( ~ variable, scales = "free") +
coord_flip() +
ggthemes::theme_fivethirtyeight()
install.packages("VIM")
library(VIM)
options(scipen = 999)
missing_plot <- VIM::aggr(train_data,
numbers = T,
sortVars = T,
col = c("lightgreen", "darkred", "orange"),
labels=str_sub(names(train_data), 1, 8),
ylab=c("Missing Value Counts"
, "Pattern"))
library(VIM)
options(scipen = 999)
missing_plot <- VIM::aggr(trainc,
numbers = T,
sortVars = T,
col = c("lightgreen", "darkred", "orange"),
labels=str_sub(names(train_data), 1, 8),
ylab=c("Missing Value Counts"
, "Pattern"))
missing_plot <- VIM::aggr(trainc,
numbers = T,
sortVars = T,
col = c("lightgreen", "darkred", "orange"),
labels=str_sub(names(train), 1, 8),
ylab=c("Missing Value Counts"
, "Pattern"))
install.packages("stringr")
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(dplyr)
library(purrr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(FactoMineR)
library(VIF)
library(knitr)
library(kableExtra)
library(Hmisc)
library(pROC)
library(binr)
# read data
train = read.csv(file="data/wine-training-data.csv")
dim(train)
summary(train) %>% kable() %>% kable_styling()
str(train)
sapply(train, function(x) sum(is.na(x))) %>% kable() %>% kable_styling()
library(UpSetR)
library(naniar)
gg_miss_fct(x = train, fct = TARGET)
train %>%
as_shadow_upset() %>%
upset(nsets = 24)
ntrain<-select_if(train, is.numeric)
ntrain %>%
keep(is.numeric) %>%                     # Keep only numeric columns
gather() %>%                             # Convert to key-value pairs
ggplot(aes(value)) +                     # Plot the values
facet_wrap(~ key, scales = "free") +   # In separate panels
geom_density()
summary_metrics <- function(df){
###Creates summary metrics table
metrics_only <- df[, sapply(df, is.numeric)]
df_metrics <- psych::describe(metrics_only, quant = c(.25,.75))
df_metrics$unique_values = rapply(metrics_only, function(x) length(unique(x)))
df_metrics <-
dplyr::select(df_metrics, n, unique_values, min, Q.1st = Q0.25, median, mean, Q.3rd = Q0.75,
max, range, sd, skew, kurtosis
)
return(df_metrics)
}
metrics_df <- summary_metrics(train)
boxplot_data <-
train %>%
dplyr::select(rownames(metrics_df)[metrics_df$unique_values < 15]) %>%
reshape2::melt(id.vars = "TARGET")
ggplot(data = boxplot_data, aes(x = factor(value), y = TARGET)) +
geom_boxplot() +
facet_wrap( ~ variable, scales = "free") +
coord_flip() +
ggthemes::theme_fivethirtyeight()
trainc <- train[complete.cases(train), ]
trainc <- trainc[, !(colnames(trainc) %in% c("INDEX"))]
rcorr(as.matrix(trainc))
corrplot(cor(trainc), method="square")
library(VIM)
library(stringr)
names(trainc)
VIM::aggr(trainc,
numbers = T,
sortVars = T,
col = c("lightgreen", "darkred", "orange"),
labels=names(trainc),
ylab=c("Missing Value Counts"
, "Pattern"))
VIM::aggr(train,
numbers = T,
sortVars = T,
col = c("lightgreen", "darkred", "orange"),
labels=names(train),
ylab=c("Missing Value Counts"
, "Pattern"))
missing_plot <- VIM::aggr(train,
numbers = T,
sortVars = T,
col = c("lightgreen", "darkred", "orange"),
labels=names(train),
ylab=c("Missing Value Counts"
, "Pattern"))
summary(missing_plot)
missing_plot$missings %>%
mutate(
pct_missing = Count / nrow(train_data)
) %>%
arrange(-pct_missing) %>%
filter(pct_missing > 0) %>%
kable(digits = 3, row.names = T, caption = "Variables Missing Values")
missing_plot$missings %>%
mutate(
pct_missing = Count / nrow(train)
) %>%
arrange(-pct_missing) %>%
filter(pct_missing > 0) %>%
kable(digits = 3, row.names = T, caption = "Variables Missing Values")
vars_neg_values <-
dplyr::select(train,
intersect(rownames(metrics_df)[metrics_df$unique_values > 15],
rownames(metrics_df)[metrics_df$min < 0])
)
neg_proportions <- t(apply(vars_neg_values, 2, function(x) prop.table(table(x < 0))))
data.frame(
Var = rownames(neg_proportions),
is_negative = neg_proportions[, 2]
) %>% arrange(-is_negative) %>%
kable(digits = 2)
ntrain %>%
keep(is.numeric) %>%                     # Keep only numeric columns
gather() %>%                             # Convert to key-value pairs
ggplot(aes(value)) +                     # Plot the values
facet_wrap(~ key, scales = "free") +   # In separate panels
geom_density()
lapply(train, abs)
train <- lapply(train, abs)
train$STARS[is.na(train$STARS)] <- mean(train$STARS, na.rm=TRUE)
train$Alcohol[is.na(train$Alcohol)] <- mean(train$Alcohol, na.rm=TRUE)
train$Sulphates[is.na(train$Sulphates)] <- mean(train$Sulphates, na.rm=TRUE)
train$pH[is.na(train$pH)] <- mean(train$pH, na.rm=TRUE)
train$TotalSulfurDioxide[is.na(train$TotalSulfurDioxide)] <- mean(train$TotalSulfurDioxide, na.rm=TRUE)
train$FreeSulfurDioxide[is.na(train$FreeSulfurDioxide)] <- mean(train$FreeSulfurDioxide, na.rm=TRUE)
train$Chlorides[is.na(train$Chlorides)] <- mean(train$Chlorides, na.rm=TRUE)
train$ResidualSugar[is.na(train$ResidualSugar)] <- mean(train$ResidualSugar, na.rm=TRUE)
vars_neg_values <-
dplyr::select(train,
intersect(rownames(metrics_df)[metrics_df$unique_values > 15],
rownames(metrics_df)[metrics_df$min < 0])
)
neg_proportions <- t(apply(vars_neg_values, 2, function(x) prop.table(table(x < 0))))
SUMMARY(TRAIN)
summary(train)
str(train)
summary(train)
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(dplyr)
library(purrr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(FactoMineR)
library(VIF)
library(knitr)
library(kableExtra)
library(Hmisc)
library(pROC)
library(binr)
# read data
train = read.csv(file="data/wine-training-data.csv")
dim(train)
train <- lapply(train, abs)
summary(train)
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(dplyr)
library(purrr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(FactoMineR)
library(VIF)
library(knitr)
library(kableExtra)
library(Hmisc)
library(pROC)
library(binr)
# read data
train = read.csv(file="data/wine-training-data.csv")
dim(train)
summary(train)
summary(train)()
summary(train)
train$STARS[is.na(train$STARS)] <- mean(train$STARS, na.rm=TRUE)
train$Alcohol[is.na(train$Alcohol)] <- mean(train$Alcohol, na.rm=TRUE)
train$Sulphates[is.na(train$Sulphates)] <- mean(train$Sulphates, na.rm=TRUE)
train$pH[is.na(train$pH)] <- mean(train$pH, na.rm=TRUE)
train$TotalSulfurDioxide[is.na(train$TotalSulfurDioxide)] <- mean(train$TotalSulfurDioxide, na.rm=TRUE)
train$FreeSulfurDioxide[is.na(train$FreeSulfurDioxide)] <- mean(train$FreeSulfurDioxide, na.rm=TRUE)
train$Chlorides[is.na(train$Chlorides)] <- mean(train$Chlorides, na.rm=TRUE)
train$ResidualSugar[is.na(train$ResidualSugar)] <- mean(train$ResidualSugar, na.rm=TRUE)
summary(train)
train <- train[, !(colnames(train) %in% c("INDEX"))]
logit <- glm(formula = TARGET ~ ., data=train, family = "binomial" (link="logit"))
lm(formula = TARGET ~ ., data=train, family = "binomial" (link="logit"))
model1 <- lm(formula = TARGET ~ ., data=train)
summary(model1)
predmodel1 <- predict(model1, type="response")
train2 <- train
train$pred1 <- predict(model1, type="response")
plot.roc(train$TARGET, train2$pred1)
train2$pred1 <- predict(model1, type="response")
plot.roc(train$TARGET, train2$pred1)
summary(train)
plot(train$TARGET, train2$pred1)
plot(train$TARGET, train2$pred1)
hist(train$TARGET)
distinct(train$TARGET)
unique(train$TARGET)
install.packages("MASS")
library(MASS)
summary(train)
model1 <- glm.nb(TARGET ~ ., data = train))
model1 <- glm.nb(TARGET ~ ., data = train)
summary(model1)
model1 <- glm(TARGET ~ ., data = train, family = "poisson)
model1 <- glm(TARGET ~ ., data = train, family = "poisson")
summary(model1)
train2 <- train
train2$pred1 <- predict(model1, type="response")
plot(train$TARGET, train2$pred1)
plot(train$TARGET, train2$pred1)
summary(train)
train = read.csv(file="data/wine-training-data.csv")
dim(train)
train$STARS[is.na(train$STARS)] <- mean(train$STARS, na.rm=TRUE)
train$Alcohol[is.na(train$Alcohol)] <- mean(train$Alcohol, na.rm=TRUE)
train$Sulphates[is.na(train$Sulphates)] <- mean(train$Sulphates, na.rm=TRUE)
train$pH[is.na(train$pH)] <- mean(train$pH, na.rm=TRUE)
train$TotalSulfurDioxide[is.na(train$TotalSulfurDioxide)] <- mean(train$TotalSulfurDioxide, na.rm=TRUE)
train$FreeSulfurDioxide[is.na(train$FreeSulfurDioxide)] <- mean(train$FreeSulfurDioxide, na.rm=TRUE)
train$Chlorides[is.na(train$Chlorides)] <- mean(train$Chlorides, na.rm=TRUE)
train$ResidualSugar[is.na(train$ResidualSugar)] <- mean(train$ResidualSugar, na.rm=TRUE)
train <- train[, !(colnames(train) %in% c("INDEX"))]
train2<-train
model1 <- glm(TARGET ~ ., data = train, family = "poisson")
train2 <- train
train2$pred1 <- predict(model1, type="response")
plot(train$TARGET, train2$pred1)
plot(train$TARGET, train2$pred1)
summary(model1)
unique(train$TARGET)
unique(train2$pred1)
model1 <- glm(TARGET ~ ., data=train, family=poisson())
summary(model1)
summary(train)
lapply(train, unique)
fit <- lda(TARGET~., data=train)
summary(fit)
data(iris)
iris[,1:4]
head(iris[,1:4])
head(iris)
len(train)
dim(train)
head(train[,2:15])
predictions <- predict(fit, train[,2:15])$class
unique(predictions)
train2$predictions <- predict(fit, train[,2:15])$class
plot(train$TARGET, train2$predictions)
train %>% count(TARGET)
library(dplyr)
train %>% count(TARGET)
cbind(train %>% count(TARGET), train2 %>% count(predictions))
rbind(train %>% count(TARGET), train2 %>% count(predictions))
train %>% count(TARGET)
train2 %>% count(predictions)
